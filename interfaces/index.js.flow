export type FilterItem = {
  filterField: string,
  compareType: string,
  dbType: any,
}

export type PayloadAction = {
  type?: string,
  payload?: any,
}

export type FunctionAction = (dispatch: Function) => any

export type ReduxAction = PayloadAction

export type NotificationType = 'info' | 'error' | 'warning'

export type Notification = {
  type: NotificationType,
  message: string,
}

export interface CrudState<T> {
  isLoading: boolean,
  isLoadingFilterGuide: boolean,
  isLoadingDetail: boolean,
  isLoadingMore: boolean,
  entities: { [key: string]: T } | {},
  result: Array<string>,
  count: number,
  query: {
    page: number,
  },
  selected: T,
  isShowDetail: boolean,
  isEdit?: boolean,
  isRemove?: boolean,
  isShowDetail: boolean,
  isSubmittingEdit?: boolean,
  isSubmittingRemove?: boolean,
  filterFields: Array<FilterItem>,
  isShowFilterGuide: boolean,
  error: any,
  notification: Notification,
}

export type CreateRequestSagaParams = {
  types: Array<string>,
  method: string,
  url: string | (params : { payload: any }) => string,
  headers?: { [key:string]: any },
  params?: { [key:string]: any },
  data?: any,
  selectState?: Function,
}

export type CreateListSagaParams = {
  constants: { [key: string]: string },
  endpoint: string,
  headers?: { [key:string]: any },
  selectState: Function,
  listProjection: string,
  detailProjection: string,
}

export type QuerySaga = {
  loadEntitiesSaga: Function,
  loadMoreSaga: Function,
  loadDetailSaga: Function,
  showFilterGuideSaga: Function,
  list: Array<Function>,
}

export type EditableSaga = {
  submitAddSaga: Function,
  submitEditSaga: Function,
  submitRemoveSaga: Function,
  createSaga: Function,
  list: Array<Function>,
}
